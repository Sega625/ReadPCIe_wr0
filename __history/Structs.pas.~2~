unit Structs;

interface

uses Winapi.Windows;

const
{$IFDEF WIN64}
  DllLib = 'WinRing0x64.dll';
{$ELSE}
  DllLib = 'WinRing0.dll';
{$ENDIF}

type
  PBYTE = ^Byte;

  TOlsDllStatus = (OLS_DLL_NO_ERROR = 0,
                   OLS_DLL_UNSUPPORTED_PLATFORM = 1,
                   OLS_DLL_DRIVER_NOT_LOADED = 2,
                   OLS_DLL_DRIVER_NOT_FOUND = 3,
                   OLS_DLL_DRIVER_UNLOADED = 4,
                   OLS_DLL_DRIVER_NOT_LOADED_ON_NETWORK = 5,
                   OLS_DLL_UNKNOWN_ERROR = 6);

  TOlsDriverType = (OLS_DRIVER_TYPE_UNKNOWN = 0,
                    OLS_DRIVER_TYPE_WIN_9X = 1,
                    OLS_DRIVER_TYPE_WIN_NT = 2,
                    OLS_DRIVER_TYPE_WIN_NT4 = 3 { Obsolete } ,
                    OLS_DRIVER_TYPE_WIN_NT_X64 = 4,
                    OLS_DRIVER_TYPE_WIN_NT_IA64 = 5);

//  TOlsErrorPci = (OLS_ERROR_PCI_BUS_NOT_EXIST = $E0000001,
//                  OLS_ERROR_PCI_NO_DEVICE = $E0000002,
//                  OLS_ERROR_PCI_WRITE_CONFIG = $E0000003,
//                  OLS_ERROR_PCI_READ_CONFIG = $E0000004);


/////////////////////////// * WinRing0.dll * ///////////////////////////////////

//******************************************************************************
//
// DLL Information
//
//******************************************************************************

//-----------------------------------------------------------------------------
// GetDllStatus
//-----------------------------------------------------------------------------

  function GetDllStatus(): DWORD; external DllLib; // DLL Status, defined OLS_DLL_****

//-----------------------------------------------------------------------------
// GetDllVersion
//-----------------------------------------------------------------------------

  function GetDllVersion(major:    PBYTE;  // major version
                         minor:    PBYTE;  // minor version
                         revision: PBYTE;  // revision
                         release:  PBYTE): // revision
                                   DWORD; external DllLib; // DLL Version, defined OLS_VERSION

//-----------------------------------------------------------------------------
// GetDriverVersion
//-----------------------------------------------------------------------------

  function GetDriverVersion(major:    PBYTE;  // major version
                            minor:    PBYTE;  // minor version
                            revision: PBYTE;  // revision
                            release:  PBYTE): // revision
                                      DWORD; external DllLib; // Device Driver Version, defined OLS_DRIVER_VERSION

//-----------------------------------------------------------------------------
// GetDriverType
//-----------------------------------------------------------------------------

  function GetDriverType(): DWORD; external DllLib; // Device Driver Type, defined OLS_DRIVER_TYPE_****

//-----------------------------------------------------------------------------
// InitializeOls
//-----------------------------------------------------------------------------

  function InitializeOls(): BOOL; external DllLib; // TRUE: success, FALSE: failure

//-----------------------------------------------------------------------------
// DeinitializeOls
//-----------------------------------------------------------------------------

  procedure DeinitializeOls(); external DllLib;

//******************************************************************************



//******************************************************************************
//
// CPU
//
//******************************************************************************

//-----------------------------------------------------------------------------
// IsCpuid
//-----------------------------------------------------------------------------

  function IsCpuid(): BOOL; external DllLib; // TRUE: support CPUID instruction, FALSE: not support CPUID instruction

//-----------------------------------------------------------------------------
// IsMsr
//-----------------------------------------------------------------------------

  function IsMsr(): BOOL; external DllLib; // TRUE: support MSR(Model-Specific Register), FALSE: not support MSR

//-----------------------------------------------------------------------------
// IsTsc
//-----------------------------------------------------------------------------

  function IsTsc(): BOOL; external DllLib; // TRUE: support TSC(Time Stamp Counter), FALSE: not support TSC

//-----------------------------------------------------------------------------
// Rdmsr
//-----------------------------------------------------------------------------

 function Rdmsr(index: DWORD;   // MSR index
	              eax:   PDWORD;	// bit  0-31
	              edx:   PDWORD):	// bit 32-63
                       BOOL; external DllLib; // TRUE: success, FALSE: failure

//-----------------------------------------------------------------------------
// RdmsrTx
//-----------------------------------------------------------------------------

  function RdmsrTx(index:              DWORD;  // MSR index
	                 eax:                PDWORD; // bit  0-31
	                 edx:                PDWORD; // bit 32-63
                   threadAffinityMask: DWORD_PTR):
                                       BOOL; external DllLib; // TRUE: success, FALSE: failure

//-----------------------------------------------------------------------------
// RdmsrPx
//-----------------------------------------------------------------------------
// TRUE: success, FALSE: failure

  function RdmsrPx(index:               DWORD;  // MSR index
	                 eax:                 PDWORD; // bit  0-31
	                 edx:                 PDWORD; // bit 32-63
                   processAffinityMask: DWORD_PTR):
                                        BOOL; external DllLib;

//-----------------------------------------------------------------------------
// Wrmsr
//-----------------------------------------------------------------------------
// TRUE: success, FALSE: failure

  function Wrmsr(index: DWORD;  // MSR index
	               eax:   DWORD;  // bit  0-31
	               edx:   DWORD): // bit 32-63
                        BOOL; external DllLib;

//-----------------------------------------------------------------------------
// WrmsrTx
//-----------------------------------------------------------------------------
// TRUE: success, FALSE: failure

  function WrmsrTx(index:              DWORD; // MSR index
	                 eax:                DWORD; // bit  0-31
	                 edx:                DWORD; // bit 32-63
                   threadAffinityMask: DWORD_PTR):
                                       BOOL; external DllLib;

//-----------------------------------------------------------------------------
// WrmsrPx
//-----------------------------------------------------------------------------
// TRUE: success, FALSE: failure

  function WrmsrPx(index:               DWORD; // MSR index
	                 eax:                 DWORD; // bit  0-31
	                 edx:                 DWORD; // bit 32-63
                   processAffinityMask: DWORD_PTR):
                                        BOOL; external DllLib;

//-----------------------------------------------------------------------------
// Rdpmc
//-----------------------------------------------------------------------------
// TRUE: success, FALSE: failure

  function Rdpmc(index: DWORD;   // PMC index
	               eax:   PDWORD;  // bit  0-31
	               edx:   PDWORD): // bit 32-63
                        BOOL; external DllLib;

//-----------------------------------------------------------------------------
// RdmsrTx
//-----------------------------------------------------------------------------
// TRUE: success, FALSE: failure

  function RdpmcTx(index:              DWORD;  // PMC index
	                 eax:                PDWORD; // bit  0-31
	                 edx:                PDWORD; // bit 32-63
                   threadAffinityMask: DWORD_PTR):
                                       BOOL; external DllLib;

//-----------------------------------------------------------------------------
// RdmsrPx
//-----------------------------------------------------------------------------
// TRUE: success, FALSE: failure

  function RdpmcPx(index:               DWORD;  // PMC index
	                 eax:                 PDWORD; // bit  0-31
	                 edx:                 PDWORD; // bit 32-63
                   processAffinityMask: DWORD_PTR):
                                        BOOL; external DllLib;

//-----------------------------------------------------------------------------
// Cpuid
//-----------------------------------------------------------------------------
// TRUE: success, FALSE: failure

  function Cpuid(index: DWORD;   // CPUID index
	               eax:   PDWORD;
                 ebx:   PDWORD;
                 ecx:   PDWORD;
	               edx:   PDWORD):
                        BOOL; external DllLib;

//-----------------------------------------------------------------------------
// CpuidTx
//-----------------------------------------------------------------------------
// TRUE: success, FALSE: failure

  function CpuidTx(index:              DWORD;  // CPUID index
	                 eax:                PDWORD;
                   ebx:                PDWORD;
                   ecx:                PDWORD;
	                 edx:                PDWORD;
                   threadAffinityMask: DWORD_PTR):
                                       BOOL; external DllLib;

//-----------------------------------------------------------------------------
// CpuidPx
//-----------------------------------------------------------------------------
// TRUE: success, FALSE: failure

  function CpuidPx(index:               DWORD;  // CPUID index
	                 eax:                 PDWORD;
                   ebx:                 PDWORD;
                   ecx:                 PDWORD;
	                 edx:                 PDWORD;
                   processAffinityMask: DWORD_PTR):
                                        BOOL; external DllLib;

//-----------------------------------------------------------------------------
// Rdtsc
//-----------------------------------------------------------------------------
// TRUE: success, FALSE: failure

  function Rdtsc(eax: PDWORD;  // bit  0-31
	               edx: PDWORD): // bit 32-63
                      BOOL; external DllLib;

//-----------------------------------------------------------------------------
// RdtscTx
//-----------------------------------------------------------------------------
// TRUE: success, FALSE: failure

  function RdtscTx(eax:                PDWORD; // bit  0-31
	                 edx:                PDWORD; // bit 32-63
                   threadAffinityMask: DWORD_PTR):
                                       BOOL; external DllLib;

//-----------------------------------------------------------------------------
// RdtscPx
//-----------------------------------------------------------------------------
// TRUE: success, FALSE: failure

  function RdtscPx(eax:                 PDWORD; // bit  0-31
	                 edx:                 PDWORD; // bit 32-63
                   processAffinityMask: DWORD_PTR):
                                        BOOL; external DllLib;

//-----------------------------------------------------------------------------
// Hlt
//-----------------------------------------------------------------------------
// TRUE: success, FALSE: failure

  function Hlt(): BOOL; external DllLib;

//-----------------------------------------------------------------------------
// HltTx
//-----------------------------------------------------------------------------
// TRUE: success, FALSE: failure

  function HltTx(threadAffinityMask: DWORD_PTR): BOOL; external DllLib;

//-----------------------------------------------------------------------------
// HltPx
//-----------------------------------------------------------------------------
// TRUE: success, FALSE: failure

  function HltPx(processAffinityMask: DWORD_PTR): BOOL; external DllLib;

//******************************************************************************



//******************************************************************************
//
// I/O
//
//******************************************************************************

//-----------------------------------------------------------------------------
// ReadIoPortByte
//-----------------------------------------------------------------------------
// Read Value

  function ReadIoPortByte(port: WORD): // I/O port address
                                BYTE; external DllLib;

//-----------------------------------------------------------------------------
// ReadIoPortWord
//-----------------------------------------------------------------------------
// Read Value

  function ReadIoPortWord(port: WORD): // I/O port address
                                WORD; external DllLib;

//-----------------------------------------------------------------------------
// ReadIoPortDword
//-----------------------------------------------------------------------------
// Read Value

  function ReadIoPortDword(port: WORD): // I/O port address
                                 DWORD; external DllLib;

//-----------------------------------------------------------------------------
// ReadIoPortByteEx
//-----------------------------------------------------------------------------
// TRUE: success, FALSE: failure

  function ReadIoPortByteEx(port:  WORD;   // I/O port address
                            value: PBYTE): // Read Value
                                   BOOL; external DllLib;

//-----------------------------------------------------------------------------
// ReadIoPortWordEx
//-----------------------------------------------------------------------------
// TRUE: success, FALSE: failure

  function ReadIoPortWordEx(port:  WORD;   // I/O port address
                            value: PWORD): // Read Value
                                   BOOL; external DllLib;

//-----------------------------------------------------------------------------
// ReadIoPortDwordEx
//-----------------------------------------------------------------------------
// TRUE: success, FALSE: failure

  function ReadIoPortDwordEx(port: WORD;    // I/O port address
                            value: PDWORD): // Read Value
                                   BOOL; external DllLib;

//-----------------------------------------------------------------------------
// WriteIoPortByte
//-----------------------------------------------------------------------------

  procedure WriteIoPortByte(port:  WORD;  // I/O port address
                            value: BYTE); // Write Value
                                          external DllLib;

//-----------------------------------------------------------------------------
// WriteIoPortWord
//-----------------------------------------------------------------------------

  procedure WriteIoPortWord(port:  WORD;  // I/O port address
                            value: WORD); // Write Value
                                          external DllLib;

//-----------------------------------------------------------------------------
// WriteIoPortDword
//-----------------------------------------------------------------------------

  procedure WriteIoPortDword(port:  WORD;   // I/O port address
                             value: DWORD); // Write Value
                                            external DllLib;

//-----------------------------------------------------------------------------
// WriteIoPortByteEx
//-----------------------------------------------------------------------------
// TRUE: success, FALSE: failure

  function WriteIoPortByteEx(port:  WORD;  // I/O port address
                             value: BYTE): // Write Value
                                    BOOL; external DllLib;

//-----------------------------------------------------------------------------
// WriteIoPortWordEx
//-----------------------------------------------------------------------------
// TRUE: success, FALSE: failure

  function WriteIoPortWordEx(port:  WORD;  // I/O port address
                             value: WORD): // Write Value
                                    BOOL; external DllLib;

//-----------------------------------------------------------------------------
// WriteIoPortDwordEx
//-----------------------------------------------------------------------------
// TRUE: success, FALSE: failure

  function WriteIoPortDwordEx(port:  WORD;   // I/O port address
                              value: DWORD): // Write Value
                                     BOOL; external DllLib;

//******************************************************************************



//******************************************************************************
//
// PCI
//
//******************************************************************************
//
// pciAddress
// 0-2: Function Number
// 3-7: Device Number
// 8-15: PCI Bus Number
// 16-31: Reserved
// 0xFFFFFFFF: Error

//-----------------------------------------------------------------------------
// SetPciMaxBusNo
//-----------------------------------------------------------------------------

  procedure SetPciMaxBusIndex(max: BYTE); // Max PCI Bus to Scan
                                          external DllLib;

//-----------------------------------------------------------------------------
// ReadPciConfigByte
//-----------------------------------------------------------------------------
// Read Value

  function ReadPciConfigByte(pciAddress: DWORD; // PCI Device Address
                             regAddress: BYTE): // Configuration Address 0-255
                                         BYTE; external DllLib;

//-----------------------------------------------------------------------------
// ReadPciConfigWord
//-----------------------------------------------------------------------------
// Read Value

  function ReadPciConfigWord(pciAddress: DWORD; // PCI Device Address
                             regAddress: BYTE): // Configuration Address 0-255
                                         WORD; external DllLib;

//-----------------------------------------------------------------------------
// ReadPciConfigDword
//-----------------------------------------------------------------------------
// Read Value

  function ReadPciConfigDword(pciAddress: DWORD; // PCI Device Address
                              regAddress: BYTE): // Configuration Address 0-255
                                          DWORD; external DllLib;

//-----------------------------------------------------------------------------
// ReadPciConfigByteEx
//-----------------------------------------------------------------------------
// TRUE: success, FALSE: failure

  function ReadPciConfigByteEx(pciAddress: DWORD;  // PCI Device Address
                               regAddress: DWORD;  // Configuration Address 0-whatever
                                    value: PBYTE): // Read Value
                                           BOOL; external DllLib;

//-----------------------------------------------------------------------------
// ReadPciConfigWordEx
//-----------------------------------------------------------------------------
// TRUE: success, FALSE: failure

  function ReadPciConfigWordEx(pciAddress: DWORD;  // PCI Device Address
                               regAddress: DWORD;  // Configuration Address 0-whatever
                                    value: PWORD): // Read Value
                                           BOOL; external DllLib;

//-----------------------------------------------------------------------------
// ReadPciConfigDwordEx
//-----------------------------------------------------------------------------
// TRUE: success, FALSE: failure

  function ReadPciConfigDwordEx(pciAddress: DWORD;   // PCI Device Address
                                regAddress: DWORD;   // Configuration Address 0-whatever
                                     value: PDWORD): // Read Value
                                            BOOL; external DllLib;

//-----------------------------------------------------------------------------
// WritePciConfigByte
//-----------------------------------------------------------------------------

  procedure WritePciConfigByte(pciAddress: DWORD; // PCI Device Address
                               regAddress: BYTE;  // Configuration Address 0-255
                                    value: BYTE); // Write Value
                                                  external DllLib;

//-----------------------------------------------------------------------------
// WritePciConfigWord
//-----------------------------------------------------------------------------

  procedure WritePciConfigWord(pciAddress: DWORD; // PCI Device Address
                               regAddress: BYTE;  // Configuration Address 0-255
                                    value: WORD); // Write Value
                                                  external DllLib;

//-----------------------------------------------------------------------------
// WritePciConfigDword
//-----------------------------------------------------------------------------

  procedure WritePciConfigDword(pciAddress: DWORD;  // PCI Device Address
                                regAddress: BYTE;   // Configuration Address 0-255
                                     value: DWORD); // Write Value
                                                    external DllLib;

//-----------------------------------------------------------------------------
// WritePciConfigByteEx
//-----------------------------------------------------------------------------
// TRUE: success, FALSE: failure

  function WritePciConfigByteEx(pciAddress: DWORD; // PCI Device Address
                                regAddress: DWORD; // Configuration Address 0-whatever
                                     value: BYTE): // Write Value
                                            BOOL; external DllLib;

//-----------------------------------------------------------------------------
// WritePciConfigWordEx
//-----------------------------------------------------------------------------
// TRUE: success, FALSE: failure

  function WritePciConfigWordEx(pciAddress: DWORD; // PCI Device Address
                                regAddress: DWORD; // Configuration Address 0-whatever
                                     value: WORD): // Write Value
                                            BOOL; external DllLib;

//-----------------------------------------------------------------------------
// WritePciConfigDwordEx
//-----------------------------------------------------------------------------
// TRUE: success, FALSE: failure

  function WritePciConfigDwordEx(pciAddress: DWORD;  // PCI Device Address
                                 regAddress: DWORD;  // Configuration Address 0-whatever
                                      value: DWORD): // Write Value
                                             BOOL; external DllLib;

//-----------------------------------------------------------------------------
// FindPciDeviceById
//-----------------------------------------------------------------------------
// pciAddress, 0xFFFFFFFF: failure

  function FindPciDeviceById(vendorId: WORD;  // Vendor ID
                             deviceId: WORD;  // Device ID
                             index:    BYTE): // Index
                                       DWORD; external DllLib;

//-----------------------------------------------------------------------------
// FindPciDeviceByClass
//-----------------------------------------------------------------------------
// pciAddress, 0xFFFFFFFF: failure

  function FindPciDeviceByClass(baseClass: BYTE;  // Base Class
                                 subClass: BYTE;  // Sub Class
                                programIf: BYTE;  // Program Interface
                                index:     BYTE): // Index
                                           DWORD; external DllLib;

//******************************************************************************



//******************************************************************************
//
// Memory (Special API)
//
//******************************************************************************
//
//#ifdef _PHYSICAL_MEMORY_SUPPORT

//-----------------------------------------------------------------------------
// ReadDmiMemory
//-----------------------------------------------------------------------------
// Read size(byte), 0: failure

  function ReadDmiMemory(buffer:   PBYTE;  // Buffer
                         count:    DWORD;  // Count
                         unitSize: DWORD): // Unit Size (BYTE, WORD, DWORD)
                                   DWORD; external DllLib;

//-----------------------------------------------------------------------------
// ReadPhysicalMemory
//-----------------------------------------------------------------------------
// Read size(byte), 0: failure

  function ReadPhysicalMemory(address: DWORD_PTR; // Physical Memory Address
                               buffer: PBYTE;     // Buffer
                                count: DWORD;     // Count
                             unitSize: DWORD):    // Unit Size (BYTE, WORD, DWORD)
                                       DWORD; external DllLib;

//-----------------------------------------------------------------------------
// WritePhysicalMemory
//-----------------------------------------------------------------------------
// Write size(byte), 0: failure

  function WritePhysicalMemory(address: DWORD_PTR; // Physical Memory Address
                                buffer: PBYTE;     // Buffer
                                 count: DWORD;     // Count
                              unitSize: DWORD):    // Unit Size (BYTE, WORD, DWORD)
                                        DWORD; external DllLib;

////////////////////////////////////////////////////////////////////////////////


implementation

end.
